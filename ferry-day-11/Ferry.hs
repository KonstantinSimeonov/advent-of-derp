{-# LANGUAGE BangPatterns #-}

import Data.Function
import qualified Data.IntMap as M
import Data.Maybe
import Debug.Trace
import Data.List

l = 10

input :: (Int, Int, String)
input

inputDemo :: String
inputDemo = "#.##.##.#########.###.#.#..#..####.##.###.##.##.###.#####.##..#.#.....###########.######.##.#####.##"

neighbs !rs !cs !i =
    [ nr * cs + nc
    | nr <- map ((+) r) [-1..1]
    , nc <- map ((+) c) [-1..1]
    , nr >= 0 && nr < rs && nc >=0 && nc < cs && (r /= nr || c /= nc)
    ]
    where
      r = i `div` cs
      c = i `mod` cs

simulate :: (Int, Int, M.IntMap Int) -> M.IntMap Int
simulate !(rs, cs, inp) = M.foldrWithKey' calc M.empty inp
  where
    --calc :: Int -> Int -> M.IntMap Int -> M.IntMap Int
    calc i v seats
      | v == 0 && takenCount == 0 = M.insert i 1 seats
      | v == 1 && takenCount >= 4 = M.insert i 0 seats
      | otherwise                 = seats
      where
        neighbSeats = neighbs rs cs i & mapMaybe (\ni -> M.lookup ni inp)
        takenCount = sum neighbSeats

converge :: (Int, Int, M.IntMap Int) -> Int
converge !(rs, cs, seats) = loop seats
  where
    loop s =
      let seatChanges = simulate (rs, cs, s)
      in if M.empty == seatChanges then sum s else loop (M.union seatChanges s)

runSimulation :: (Int, Int, String) -> Int
runSimulation !(rs, cs, inp) = converge (rs, cs, seats)
  where
    seats =
      zip [0..] inp
      & filter (\x -> snd x == 'L')
      & map (\x -> (fst x, 0))
      & M.fromList


dbg :: Show a => a -> a
dbg x = trace (show x) x

debug :: Int -> Int -> M.IntMap Int -> M.IntMap Int
debug rs rc seats = trace grid seats
  where
    grid = intercalate "" $ zipWith (\v i -> (toS v) ++ if i `mod` rc == 0 then "\n" else "") nums [1..]
    nums = [fromMaybe 2 $ M.lookup i seats | i <- [0..rs * rc - 1]]
    toS 0 = "L"
    toS 1 = "#"
    toS 2 = "."
